package main

import "fmt"

/*一个指针变量可以指向任何一个值的内存地址 它指向那个值的内存地址，在 32 位机器上占用 4 个字节，在 64 位机器上占用 8 个字节，并且与它所指向的值的大小无关。
当然，可以声明指针指向任何类型的值来表明它的原始性或结构性；你可以在指针类型前面加上 * 号（前缀）来获取指针所指向的内容，这里的 * 号是一个类型更改器。
使用一个指针引用一个值被称为间接引用。


	Go 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址。
	在指针类型前面加上 * 号（前缀）来获取指针所指向的内容，这里的 * 号是一个类型更改器。使用一个指针引用一个值被称为间接引用

prt 定义为一个指针类型，标识指向存储int类型值的指针，prt本身是一个内存地址值，所以需要通过内存地址值进行赋值
	（通过&a 可以获取到变量a所在内存的地址）可以通过 *ptr 获取指针指向内存地址存储的变量值（我们通常将这种引用称作「间接引用」
	Go 语言之所以引入指针类型，主要基于两点考虑，一个是为程序员提供操作变量对应内存数据结构的能力；
		另一个是为了提高程序的性能（指针可以直接指向某个变量值的内存地址，可以极大节省内存空间，操作效率也更高），
		这在系统编程、操作系统或者网络应用中是不容忽视的因素
	符号 * 可以放在一个指针前，如 *intP，那么它将得到这个指针指向地址上所存储的值；这被称为反引用（或者内容或者间接引用）操作符；
	另一种说法是指针转移

一个指针变量可以指向任何一个值的内存地址 它指向那个值的内存地址，在 32 位机器上占用 4 个字节，在 64 位机器上占用 8 个字节，
		并且与它所指向的值的大小无关。当然，可以声明指针指向任何类型的值来表明它的原始性或结构性；你可以在指针类型前面加上 * 号（前缀）
		来获取指针所指向的内容，这里的 * 号是一个类型更改器。使用一个指针引用一个值被称为间接引用。

*/

func main() {
	a := 100
	/*声明指针类型*/
	var prt *int
	/*初始化指针类型值为变量 a*/
	prt = &a
	fmt.Println(prt)
	fmt.Println(*prt)

	/*当一个指针被定义后没有分配到任何变量时，它的值为 nil。*/
	var prt1 *string
	fmt.Println(prt1)
	v := 20
	ptr := &v
	fmt.Println(*ptr)

	ptr1 := &prt1
	fmt.Println(ptr1)
}
func main2() {

	prt := 5
	fmt.Printf("An integer: %d,its location in memory: %p\n", prt, &prt) //（指针的格式化标识符为 %p）
	var intp *int
	intp = &prt
	fmt.Println(intp, *intp)
	fmt.Printf("类型为: %T", intp)

}
